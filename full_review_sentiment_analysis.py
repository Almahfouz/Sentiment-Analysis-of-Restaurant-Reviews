# -*- coding: utf-8 -*-
"""task3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1t6n96oiHrBihDv71xcIejuYObUDpFYuM
"""

pip install transformers gradio

pip install fuzzywuzzy[speedup]

pip install fuzzywuzzy[speedup]

import pandas as pd

# Load the uploaded file
file_path = 'Restaurant_reviews.csv'
df = pd.read_csv(file_path)

# Display the first few rows of the dataset to understand its structure
df.head(150)

import pandas as pd
from transformers import pipeline
import gradio as gr
import seaborn as sns
import matplotlib.pyplot as plt
from fuzzywuzzy import fuzz

# Load the dataset
reviews_df = pd.read_csv('Restaurant_reviews.csv')

# Load the sentiment analysis model
sentiment_model = pipeline("sentiment-analysis", model="distilbert-base-uncased-finetuned-sst-2-english")

# Function to classify a review
def classify_review(user_review):
    try:
        if not user_review.strip():
            return "Please enter a valid review."

        best_match = None
        best_score = 0

        # Iterate through each review in the dataset
        for _, row in reviews_df.iterrows():
            if pd.isna(row['Review']):
                continue

            # Fuzzy matching between the user review and dataset reviews
            score = fuzz.token_sort_ratio(user_review.lower(), str(row['Review']).lower())
            if score > best_score:
                best_score = score
                best_match = row

        # If a good match is found (score > 80%)
        if best_score > 80:
            rating = best_match['Rating']
            rating_based_classification = f"Positive review based on rating: {rating}" if int(rating) >= 4 else f"Negative review based on rating: {rating}"

            # Sentiment analysis on the user's review
            sentiment_result = sentiment_model(user_review)[0]
            sentiment = sentiment_result['label']
            confidence = sentiment_result['score']
            sentiment_based_classification = f"Model prediction: {sentiment} with confidence: {confidence:.2f}"

            return f"{rating_based_classification}\n{sentiment_based_classification}\nMatching Score: {best_score}%"
        else:
            return "Review not found in the dataset."

    except Exception as e:
        return f"An error occurred: {str(e)}"

# Function to plot the distribution of ratings
def plot_rating_distribution():
    plt.figure(figsize=(8, 6))
    sns.countplot(x='Rating', data=reviews_df, order=[1, 2, 3, 4, 5])
    plt.title('Distribution of Ratings')
    plt.xlabel('Rating')
    plt.ylabel('Count')
    plt.tight_layout()
    return plt.gcf()

# Create Gradio interfaces
review_interface = gr.Interface(
    fn=classify_review,
    inputs=gr.Textbox(lines=2, placeholder="Enter your review here", label="Reviews"),
    outputs="text",
    title="Review Classifier Based on Rating and Hugging Face Model",
    description="Enter a restaurant review. The system will classify it based on the dataset rating and use a sentiment analysis model."
)

plot_interface = gr.Interface(
    fn=plot_rating_distribution,
    inputs=[],
    outputs="plot",
    title="Rating Distribution",
    description="Shows the distribution of ratings in the dataset."
)

# Combine the two interfaces using tabs
tabbed_interface = gr.TabbedInterface([review_interface, plot_interface], ["Review Classifier", "Rating Distribution"])

# Launch the interfaces
tabbed_interface.launch()
